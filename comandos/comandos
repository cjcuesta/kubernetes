https://killercoda.com/login

#para ver la vesion
kubectl version
Aparece: 
- la version de kustomize 
- la versión de kubernetes cliente es decir de kubectl
- la version del server es decir la del cluster

##Para ver tanto los cluster configurados. Tanto a GKE como a Minikube
kubectl config get-contexts

##Cuando ya se ha acondicionado el sistema
kctx

##para cambiarme al cluster minikube
k config use-context minikube

##cuando ya se ha acondicionado el sistema
kctx minikube

##para cambiarme al contexto GKE
k config use-context gke_practica-keep-carlosjulio_europe-west1-b_cluster-cj 

Existen 2 name spaces por defecto: Default y kube-system

##para ver los namespaces
kubectl get ns

##para ver los namespaces y que marque en el que estoy actualmente
kubectl ns

##cuando ya se ha acondicionado el sistema
kns

##para pasarme a un namespace especifico 
kubectl ns kube-system

##cuando ya se ha acondicionado el sistema
kns kube-system

##Para crear un name space
kubectl create ns test

##Para borrar un name space
kubectl delete namespace test

##para ver los pods que hay en un namespace
kubectl -n test get pods

los objetos en kubernates pueden ser namespaced o  non-namespaced
kubectl api-resources --namespaced=false
kubectl api-resources --namespaced=true

#Muestra los nodos del cluster en el que se este conectado 
kubectl get nodes
k get nodes

#Muestra los nodos del cluster en el que se este conectado con:
- sus respectivas ip
- Sistema Operativo
- Version del kernel
k get nodes -o wide

#Creamos un POD con nombre my-nginx con imagen ngixn que la descarga automaticamente de Docker Hub
k run my-nginx --image=nginx

#muestra los PODs del namespace donde este
k get pods
NAME       READY   STATUS    RESTARTS   AGE
my-nginx   1/1     Running   0          3m53s


#Comando para ver los pods
k get pods

Comando para esperar que sucede con los pods 
k get pods -w

#muestra los PODs del namespace, en que nodo esta, que ip tiene y amplia informacion
k get pods -o wide
NAME       READY   STATUS    RESTARTS   AGE    IP           NODE       NOMINATED NODE   READINESS GATES
my-nginx   1/1     Running   0          4m6s   10.244.0.3   minikube   <none>           <none>

#muestra los PODs de todos los namespaces
k get pods -A

#muestra solo el nombre del pod
k get pod nombre-pod 

#Muestra informacion del pod y sus contenedores
- Muestra la IP
- Muestra los initContainers y su estado que van en orden
- Muestra el contenedor ppal
- Muestra condiciones, volumenes, node-selectors, info de inicializacion

k describe pod nombre-pod 

#Comando para ver los logs de un pod
k logs nombre-pod

#Comando para ver los logs continuo de un pod
k logs -f nombre-pod

#Comando para ver los logs de un pod cuando se tienen varios contenedores
#Se debe colocar el nombre del contenedor
k logs nombre-pod-multicontenedor -c nombre(init)Container

#Muestra la definicion del pod aunque no se pueda modificar
k get pod nombre-pod -o=yaml

#Crea un esqueleto yaml pero no crea el pod
kubectl run --image=nginx my-new-pod --dry-run=client -o=yaml > my-new-pod.yaml 
kubectl run pod-nginx --image=nginx:1.14.2  --dry-run=client -o=yaml > pods/pod-nginx.yaml 

##Se quita esto
##  creationTimestamp: null
##  labels:
##    run: pod-nginx
##    ..
##  resources: {}
##  dnsPolicy: ClusterFirst
##  restartPolicy: Always
##   status: {}

#Borramos el POD creado
k delete pod nombre-pod

##Luego se aplican los cambios realizados
kubectl apply -f pods/pod-nginx.yaml

##Comando para borrar un pod (o cualquier objeto) que se hay creado desde un archivo yaml
kubectl delete -f pods/pod-nginx.yaml

##args    equivale a CMD en docker
##command equivale a ENTRYPOINT en docker

##Crea el esqueleto de un POD los que hay despues del -- lo envia al CMD
kubectl run nginx --image=nginx --dry-run=client -o=yaml -- echo "HOla mundo" > pod-nginx-spec.yaml

##Con la opcion --command Crea el esqueleto de un POD lo que hay despues del -- lo envia al ENTRYPOINT
kubectl run nginx --image=nginx --dry-run=client -o=yaml --command -- echo "HOla mundo" > pod-nginx-spec.yaml

##Con la opcion --env  Crea el esqueleto de un POD con variables de ambiente.
kubectl run nginx --image=eedugon/flask --dry-run=client -o=yaml --env REDIS_HOST=redis > pod-nginx-spec.yaml

##Lo anterior se puede combinar con las opciones ENTRYPOINT ó CMD pero no las 3 a la vez
kubectl run nginx --image=eedugon/flask --dry-run=client -o=yaml --env REDIS_HOST=redis -- echo "HOla mundo" > pod-nginx-spec.yaml 

kubectl run nginx --image=eedugon/flask --dry-run=client -o=yaml --env REDIS_HOST=redis --command -- echo -c "Hola Mundo" > pod-nginx-spec.yaml

#me puedo conectar al POD por bash o sh de acuerdo a la imagen
k exec pod-nginx -it -- bash
k exec pod-nginx -it -- sh

#comando para ir mirando que sucede con los pods
# 1ro Abrimos 2 consola
# En una consola digitamos el comando que 
kubectl get pods -w

#En la 2da otra consola podemos crear un pod que se destruye al salir. 
#Como en los siguientes pasos

#Para crear un Pod directamente 
#Crea un pod busybox y nos quedamos por linea de comandos se destruye cuando salimos
##OJO --rm debe ser todo pegado sino el sistema creera que es un command y no desplegará el pod

kubectl run curl-test -it --image=radial/busyboxplus:curl --rm

##Si se pierde la consola se puede ingresar de la siguiente manera
k exec curl-test -it -- sh

#Podemos buscar por nombre
nslookup nginx 

#Podemos llamar al contenedor
curl nginx

##Crear un DEPLOYMENT
kubectl create deployment dep-my-first --image=nginx --dry-run=client -o=yaml > dep-my-first.yaml

##Se modifica en Visual Studio y se coloca a 6 las replicas

##Se aplica el DEPLOYMENT
kubectl apply -f dep-my-first.yaml 

## Muestra un deployment en particular
k get deployment dep-my-first

## Describe el Deployment
k describe deployment dep-my-first

## Baja de 6 a 2 réplicas 
k scale deployment dep-my-first --replicas 2

##Borra el deployment junto con sus réplicas
k delete deployment dep-my-first

#Muestra todos los deployments
k get deployments 

##Muestra lo sucedido con los deployments
k describe deployments

##Para crear un servico de tipo LoadBalancer pueda ser accesible desde el exterior
##Esto pide el password de root y bloquea la ventana
minikube tunnel 

##se crea el SERVICIO de tipo LoadBalancer basado en el DEPLOYMENT ejecutado. p
                          DEPLOYMENT   NOMBRESERVICIO                          ESCUCHA     DEL NGINX 
kubectl expose deployment dep-my-first --name=svc-my-first --type=LoadBalancer --port=8080 --target-port=80 --dry-run=client -o=yaml > svc-my-first.yaml

#Muestra la Ip externa EXTERNAL-IP
kubectl get svc 

#En nuestro navegador 
http://10.111.41.93:8080/

##Se crea el SERVICIO de tipo IPCluster basado en el DEPLOYMENT ejecutado
                          DEPLOYMENT   NOMBRESERVICIO                         ESCUCHA     DEL NGINX 
kubectl expose deployment dep-my-first --name=svc-my-first --type=IPCluster --port=8080 --target-port=80 --dry-run=client -o=yaml > svc-my-first.yaml

#Borra el servicio
#k delete service svc-my-first

#Crea un backup de varios deployments que se esten ejectuando
#lo guarda y puede ser ejecutado en otro cluster. 
kubectl get deployment1 deploymen2 deploymen3 -o=yaml > dep-backup.yaml

#Crear config maps
1 Se pueden crear desde una archivo yaml 
2 Se pueden crear desde un archivo normal
3 Se puede crear desde un directorio completo
4 Se puede crear desde un archivo con datos clave=valor
5 Se puede crear con valores literales. Más para secrets que config-map

1 k apply -f my-config.yml
2 k create configmap my-config-file --from-file=/myruta/myarchivo.conf
3 k create configmap my-config-dir --from-file=/myruta/
4 k create configmap my-config-env --from-env-file=/myruta/my_env.ext
5 k create configmap my-config-lit --from-literal clave1=valor1 clave2=valor2 

#para ver los configmap 
k get configmaps
k get configmaps myconfig-file -o=yaml
k describe configmap myconfig-file 

#abreviación cm en lugar de configmaps
k get cm 
k get cm  myconfig-file -o=yaml
k describe cm myconfig-file 

#para ver la ayuda
k create configmap --help

#Para borrar 
k delete my-config-file
k delete my-config-file my-config-dir my-config-env

Todos quedan con clave el nombre del archivo que están leyendo
Si se desea que guardar en un yaml
k create configmap my-config-file --from-file=/myruta/myarchivo.conf --dry-run=client -o yaml
k create configmap my-config-dir --from-file=/myruta/ --dry-run=cliente -o yaml
k create configmap my-config-env --from-env-file=/myruta/my_env.ext --dry-run=client-o

Si se desea que la llave no quede con el nombre del archivo
k create configmap my-config-file --from-file=MICLAVE=/myruta/myarchivo.conf

