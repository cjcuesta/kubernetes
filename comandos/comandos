https://killercoda.com/login

##Para ver tanto los cluster configurados. Tanto a GKE como a Minikube
kubectl config get-contexts

##para cambiarme al cluster minikube
k config use-context minikube

##para cambiarme al contexto GKE
k config use-context gke_practica-keep-carlosjulio_europe-west1-b_cluster-cj 

#Muestra los nodos del cluster en el que se este conectado 
kubectl get nodes
k get nodes

#muestra los PODs del namespace donde este
k get pods

#muestra los PODs de todos los namespaces
k get pods -A

#muestra solo el nombre del pod
k get pod nombre-pod 

#Muestra la definicion del pod aunque no se pueda modificar
k get pod nombre-pod -o=yaml

#Crea un esqueleto yaml pero no crea el pod
kubectl run --image=nginx my-new-pod --dry-run=client -o=yaml > my-new-pod.yaml 
kubectl run pod-nginx --image=nginx:1.14.2  --dry-run=client -o=yaml > pods/pod-nginx.yaml 

##Se quita esto
##  creationTimestamp: null
##  labels:
##    run: pod-nginx
##    ..
##  resources: {}
##  dnsPolicy: ClusterFirst
##  restartPolicy: Always
##   status: {}

##Luego se aplican los cambios realizados
kubectl apply -f pods/pod-nginx.yaml

##args    equivale a CMD en docker
##command equivale a ENTRYPOINT en docker

##Crea el esqueleto de un POD los que hay despues del -- lo envia al CMD
kubectl run nginx --image=nginx --dry-run=client -o=yaml -- echo "HOla mundo" > pod-nginx-spec.yaml

##Con la opcion --command Crea el esqueleto de un POD lo que hay despues del -- lo envia al ENTRYPOINT
kubectl run nginx --image=nginx --dry-run=client -o=yaml --command -- echo "HOla mundo" > pod-nginx-spec.yaml

##Con la opcion --env  Crea el esqueleto de un POD con variables de ambiente.
kubectl run nginx --image=eedugon/flask --dry-run=client -o=yaml --env REDIS_HOST=redis > pod-nginx-spec.yaml

##Lo anterior se puede combinar con las opciones ENTRYPOINT 칩 CMD pero no las 3 a la vez
kubectl run nginx --image=eedugon/flask --dry-run=client -o=yaml --env REDIS_HOST=redis -- echo "HOla mundo" > pod-nginx-spec.yaml 

kubectl run nginx --image=eedugon/flask --dry-run=client -o=yaml --env REDIS_HOST=redis --command -- echo -c "Hola Mundo" > pod-nginx-spec.yaml

#me puedo conectar al POD
k exec pod-nginx -it -- bash

#Para crear un Pod directamente 
#Crea un pod busybox y nos quedamos por linea de comandos se destruye cuando salimos
kubectl run curl-test -it --image=radial/busyboxplus:curl --rm

##Si se pierde la consola se puede ingresar de la siguiente manera
k exec curl-test -it -- sh

#Podemos buscar por nombre
nslookup nginx 

#Podemos llamar al contenedor
curl nginx

##Crear un Deployment
kubectl create deployment dep-my-first --image=nginx --dry-run=client -o=yaml > dep-my-first.yaml

##Se aplica el deployment
kubecetl apply -f dep-my-first.yaml 

##se crea el servicio basado en el deployment ejecutado
kubectl expose deployment dep-my-first --type=IPCluster --port=8080 --dry-run=client -o=yaml > svc-my-first.yaml

#Crea un backup de varios deployments que se esten ejectuando
#lo guarda y puede ser ejecutado en otro cluster. 
kubectl get deployment1 deploymen2 deploymen3 -o=yaml > dep-backup.yaml

#Crear config maps
1 Se pueden crear desde una archivo yaml 
2 Se pueden crear desde un archivo normal
3 Se puede crear desde un directorio completo
4 Se puede crear desde un archivo con datos clave=valor
5 Se puede crear con valores literales. M치s para secrets que config-map

1 k apply -f my-config.yml
2 k create configmap my-config-file --from-file=/myruta/myarchivo.conf
3 k create configmap my-config-dir --from-file=/myruta/
4 k create configmap my-config-env --from-env-file=/myruta/my_env.ext
5 k create configmap my-config-lit --from-literal clave1=valor1 clave2=valor2 

#para ver los configmap 
k get configmaps
k get configmaps myconfig-file -o=yaml
k describe configmap myconfig-file 

#abreviaci칩n cm en lugar de configmaps
k get cm 
k get cm  myconfig-file -o=yaml
k describe cm myconfig-file 

#para ver la ayuda
k create configmap --help

#Para borrar 
k delete my-config-file
k delete my-config-file my-config-dir my-config-env

Todos quedan con clave el nombre del archivo que est치n leyendo
Si se desea que guardar en un yaml
k create configmap my-config-file --from-file=/myruta/myarchivo.conf --dry-run=client -o yaml
k create configmap my-config-dir --from-file=/myruta/ --dry-run=cliente -o yaml
k create configmap my-config-env --from-env-file=/myruta/my_env.ext --dry-run=client-o

Si se desea que la llave no quede con el nombre del archivo
k create configmap my-config-file --from-file=MICLAVE=/myruta/myarchivo.conf

