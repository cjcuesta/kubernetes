https://killercoda.com/login

##Para ver tanto los cluster configurados. Tanto a GKE como a Minikube
kubectl config get-contexts

##para cambiarme al cluster minikube
k config use-context minikube

##para cambiarme al contexto GKE
k config use-context gke_practica-keep-carlosjulio_europe-west1-b_cluster-cj 

#Muestra los nodos del cluster en el que se este conectado 
kubectl get nodes
k get nodes

#muestra los PODs del namespace donde este
k get pods

#muestra los PODs de todos los namespaces
k get pods -A

#Crea un esqueleto yaml pero no crea el pod
kubectl run --image=nginx my-new-pod --dry-run=client -o=yaml > my-new-pod.yaml 
kubectl run pod-nginx --image=nginx:1.14.2  --dry-run=client -o=yaml > pods/pod-nginx.yaml 

##Se quita esto
##  creationTimestamp: null
##  labels:
##    run: pod-nginx
##    ..
##  resources: {}
##  dnsPolicy: ClusterFirst
##  restartPolicy: Always
##   status: {}

##Luego se aplican los cambios realizados
kubectl apply -f pods/pod-nginx.yaml

##args    equivale a CMD en docker
##command equivale a ENTRYPOIN en docker

##Crea el esqueleto de un POD los que hay despues del -- lo envia al CMD
kubectl run nginx --image=nginx --dry-run=client -o=yaml -- echo "HOla mundo" > pod-nginx-spec.yaml

##Con la opcion --command Crea el esqueleto de un POD lo que hay despues del -- lo envia al ENTRYPOINT
kubectl run nginx --image=nginx --dry-run=client -o=yaml --command -- echo "HOla mundo" > pod-nginx-spec.yaml

##Con la opcion --env  Crea el esqueleto de un POD con variables de ambiente.
kubectl run nginx --image=eedugon/flask --dry-run=client -o=yaml --env REDIS_HOST=redis > pod-nginx-spec.yaml

##Lo anterior se puede combinar con las opciones ENTRYPOINT รณ CMD pero no las 3 a la vez
kubectl run nginx --image=eedugon/flask --dry-run=client -o=yaml --env REDIS_HOST=redis -- echo "HOla mundo" > pod-nginx-spec.yaml 

kubectl run nginx --image=eedugon/flask --dry-run=client -o=yaml --env REDIS_HOST=redis --command -- echo -c "Hola Mundo" > pod-nginx-spec.yaml

##Crear un Deployment
kubectl create deployment dep-my-first --image=nginx --dry-run=client -o=yaml > dep-my-first.yaml

##Se aplica el deployment
kubecetl apply -f dep-my-first.yaml 

##se crea el servicio basado en el deployment ejecutado
kubectl expose deployment dep-my-first --type=IPCluster --port=8080 --dry-run=client -o=yaml > svc-my-first.yaml

#me puedo conectar al POD
k exec pod-nginx -it -- bash

#Para crear un Pod directamente 
#Crea un pod busybox y nos quedamos por linea de comandos se destruye cuando salimos
kubectl run curl-test -it --image=radial/busyboxplus:curl --rm

##Si se pierde la consola se puede ingresar de la siguiente manera
k exec curl-test -it -- sh

#Podemos buscar por nombre
nslookup nginx 

#Podemos llamar al contenedor
curl nginx
